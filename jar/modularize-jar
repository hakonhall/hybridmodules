#!/bin/bash

set -e

declare VERBOSE=false

declare TMP_DIRECTORY=""

function PrintArguments {
    if (( $# > 0 ))
    then
        printf "%s" "$1"
        shift
        # bash(1): "The format is re-used as necessary to consume all of the
        # arguments."
        printf "%s" "$@"
        printf "\n"
    fi
}

function Usage {
    PrintArguments "$@"
    cat <<EOF
Usage: ${0##*/} [OPTION...]
Update an existing jar to a modular jar.

Options:
  -f, --file FILE               The archive file name [required]
      --main-class CLASSNAME    The application entry point for stand-alone
                                applications bundled into a modular or
                                executable jar.
  -I, --module-info FILE        The module-info.java file [required]
  -p, --module-path MPATH       The module path when compiling module-info.java.
  -V, --module-version VERSION  The module version
  -u, --update                  Update an existing jar archive [required]

Example:
  ${0##*/} -u -f foo.jar -I module-info.java -p modsdir1:modsdir2

Prerequisites: realpath
EOF

    # Verify & do: Add --module-path to get compiled versions correct?

    exit 0
}

function Fail {
    if (( $# > 0 ))
    then
        printf "%s" "$@"
        printf "\n"
    fi

    exit 1
}

function Run {
    local command="$1"
    shift

    if $VERBOSE
    then
        printf "%q" "$command"
        printf " %q" "$@"
        printf "\n"
    fi

    "$command" "$@"
}

function RemoveTemporaryDirectory {
    rm -rf "$TMP_DIRECTORY"
}

function Main {
    type realpath &> /dev/null || Fail "This program requires 'realpath'"

    local is_update=false
    local jarfile=""
    local module_info=""
    local -a javac_xopts=()
    local -a jar_xopts=()

    while (( $# > 0 ))
    do
        case "$1" in
            -u|--update)
                is_update=true
                shift
                ;;
            -f|--file)
                test -r "$2" || Fail "No such file: $2"
                jarfile=$(realpath -m "$2")
                test -r "$jarfile" || Fail "Failed to resolve $1"
                shift 2
                ;;
            -h|--help)
                Usage
                ;;
            --main-class)
                jar_xopts+=(--main-class "$2")
                shift 2
                ;;
            -I|--module-info)
                test -r "$2" || Fail "No such file: $2"
                module_info="$2"
                module_info=$(realpath -m "$module_info")
                test -r "$module_info" || Fail "Failed to resolve $1"
                shift 2
                ;;
            -p|--module-path)
                javac_xopts+=("$1" "$2")
                shift 2
                ;;
            -V|--module-version)
                javac_xopts+=(--module-version "$2")
                shift 2
                ;;
            --verbose|-v)
                VERBOSE=true
                shift
                ;;
            -*) Fail "Unknown option: $1" ;;
            *)
                break
                ;;
        esac
    done

    (( $# == 0 )) || Fail "Too many arguments: $*"
    $is_update || Fail "--update is required, see --help"
    test -n "$jarfile" || Fail "--file is required, see --help"
    test -n "$module_info" || Fail "--module-info is required, see --help"

    if ! TMP_DIRECTORY=$(mktemp -d)
    then
        Fail "Failed to create temporary directory with 'mktemp -d'"
    fi
    trap RemoveTemporaryDirectory EXIT

    local pwd="$PWD"
    cd "$TMP_DIRECTORY"
    ln -s "$module_info" module-info.java
    mkdir exploded
    cd exploded
    jar -x -f "$jarfile"
    # A timestamp on an existing module-info.class may fool javac.
    rm -f module-info.class

    cd "$pwd"
    Run javac "${javac_xopts[@]}" -d "$TMP_DIRECTORY"/exploded \
          "$TMP_DIRECTORY"/module-info.java
    Run jar -u -f "$jarfile" "${jar_xopts[@]}" -C "$TMP_DIRECTORY"/exploded \
        module-info.class
}

Main "$@"
